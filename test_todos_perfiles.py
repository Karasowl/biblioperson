#!/usr/bin/env python3
"""
Script para verificar que TODOS los perfiles que usan el segmentador "heading" 
tienen las mejoras de fusi√≥n inteligente aplicadas.
"""

import sys
import os
import logging
from pathlib import Path

# A√±adir el directorio del proyecto al path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from dataset.processing.profile_manager import ProfileManager

def test_todos_perfiles():
    """Prueba todos los perfiles que usan el segmentador heading."""
    
    # Configurar logging
    logging.basicConfig(level=logging.WARNING, format='%(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)
    
    print("=== VERIFICANDO TODOS LOS PERFILES CON SEGMENTADOR HEADING ===\n")
    
    # Crear ProfileManager
    profile_manager = ProfileManager()
    
    # Lista de perfiles que deber√≠an usar heading
    perfiles_heading = [
        'prosa',
        'book_structure', 
        'chapter_heading',
        'perfil_docx_heading'
    ]
    
    # Bloques de prueba con el problema espec√≠fico
    test_blocks_problema = [
        {
            'text': 'econ√≥micamente inestables, los analfabetas, los poco sofisticados y las personalidades',
            'type': 'text_block',
            'order_in_document': 0,
            'coordinates': {'x0': 72, 'y0': 100, 'x1': 523, 'y1': 115},
            'source_page_number': 1
        },
        {
            'text': 'autoritarias".22 Los blancos inmediatos de estos te√≥ricos sociales fueron el macartismo y la John',
            'type': 'text_block',
            'order_in_document': 1,
            'coordinates': {'x0': 72, 'y0': 118, 'x1': 500, 'y1': 133},  # Gap: 3pt (PEQUE√ëO)
            'source_page_number': 1
        },
        {
            'text': 'Birch Society, pero sus diagn√≥sticos a menudo se extend√≠an a la originaria revuelta populista en los',
            'type': 'text_block',
            'order_in_document': 2,
            'coordinates': {'x0': 72, 'y0': 121, 'x1': 520, 'y1': 136},  # Gap: 3pt (PEQUE√ëO)
            'source_page_number': 1
        }
    ]
    
    metadata = {
        'source_file_path': 'populismo.pdf',
        'blocks_are_fitz_native': True,
        'author': 'Jan-Werner M√ºller'
    }
    
    for perfil_nombre in perfiles_heading:
        print(f"üîç PROBANDO PERFIL: {perfil_nombre}")
        
        # Cargar perfil
        profile = profile_manager.get_profile(perfil_nombre)
        if not profile:
            print(f"   ‚ùå ERROR: No se pudo cargar el perfil '{perfil_nombre}'")
            continue
            
        print(f"   ‚úÖ Perfil cargado: {profile['name']}")
        
        # Verificar que use el segmentador heading
        segmenter_type = profile.get('segmenter')
        if segmenter_type != 'heading':
            print(f"   ‚ö†Ô∏è  AVISO: Perfil usa segmentador '{segmenter_type}', no 'heading'")
            continue
            
        # Verificar configuraci√≥n del preprocessor
        preprocessor_config = profile.get('pre_processor_config')
        if not preprocessor_config:
            print(f"   ‚ùå ERROR: No tiene configuraci√≥n de pre-procesador")
            continue
            
        # Verificar configuraciones clave
        tiene_fusion = preprocessor_config.get('aggressive_merge_for_pdfs', False)
        tiene_filtrado = preprocessor_config.get('filter_insignificant_blocks', False)
        
        if not tiene_fusion:
            print(f"   ‚ùå ERROR: No tiene fusi√≥n agresiva habilitada")
            continue
            
        if not tiene_filtrado:
            print(f"   ‚ùå ERROR: No tiene filtrado de bloques insignificantes")
            continue
            
        print(f"   ‚úÖ Configuraci√≥n OK: fusi√≥n={tiene_fusion}, filtrado={tiene_filtrado}")
        
        # Crear preprocessor y probar
        try:
            from dataset.processing.pre_processors.common_block_preprocessor import CommonBlockPreprocessor
            preprocessor = CommonBlockPreprocessor(config=preprocessor_config)
            
            # Probar fusi√≥n espec√≠fica
            should_merge = preprocessor._should_merge_blocks(
                test_blocks_problema[0]['text'],
                test_blocks_problema[1]['text'],
                test_blocks_problema[0]['source_page_number'],
                test_blocks_problema[1]['source_page_number'],
                3,  # gap peque√±o
                25  # max_gap
            )
            
            if should_merge:
                print(f"   ‚úÖ FUSI√ìN OK: Detecta correctamente que debe fusionar oraciones cortadas")
            else:
                print(f"   ‚ùå FUSI√ìN FALLA: No detecta que debe fusionar oraciones cortadas")
                
            # Probar procesamiento completo
            processed_blocks, _ = preprocessor.process(test_blocks_problema, metadata)
            
            # Verificar resultado
            fusion_correcta = False
            for block in processed_blocks:
                text = block.get('text', '')
                if 'personalidades autoritarias' in text:
                    fusion_correcta = True
                    break
                    
            if fusion_correcta:
                print(f"   ‚úÖ RESULTADO OK: Las palabras cortadas se fusionaron correctamente")
            else:
                print(f"   ‚ùå RESULTADO FALLA: Las palabras cortadas NO se fusionaron")
                print(f"      Bloques resultantes: {len(processed_blocks)}")
                for i, block in enumerate(processed_blocks):
                    text = block.get('text', '')[:80]
                    print(f"        {i+1}. '{text}...'")
                
        except Exception as e:
            print(f"   ‚ùå ERROR al procesar: {e}")
            
        print()  # L√≠nea en blanco entre perfiles
    
    print("=== RESUMEN ===")
    print("Si TODOS los perfiles muestran '‚úÖ RESULTADO OK', entonces las mejoras est√°n aplicadas correctamente.")
    print("Si alg√∫n perfil muestra '‚ùå RESULTADO FALLA', ese perfil necesita correcci√≥n.")
    print("\n‚ö†Ô∏è  IMPORTANTE: Usa el perfil que muestre '‚úÖ RESULTADO OK' en tu UI.")

if __name__ == "__main__":
    test_todos_perfiles() 