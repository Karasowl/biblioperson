// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Modelo User simplificado - conecta con Supabase Auth
model User {
  id             String   @id @default(uuid())
  supabaseUserId String   @unique @map("supabase_user_id")
  email          String   @unique
  name           String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relaciones - solo contenido pesado
  documents         Document[]
  favorites         Favorite[]
  readingProgress   ReadingProgress[]
  annotations       Annotation[]
  notebooks         AnnotationNotebook[]
  contentReferences ContentReference[]
  conversations     Conversation[]
  preferences       UserPreference[]
  processingConfigs UserProcessingConfig[]

  @@map("users")
}

model Author {
  id          String   @id @default(cuid())
  name        String   @unique
  biography   String?
  nationality String?
  birthYear   Int?
  deathYear   Int?
  imageUrl    String?
  specialty   String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  documents Document[]
  conversations Conversation[]

  @@map("authors")
}

model Document {
  id           String   @id @default(cuid())
  title        String
  originalPath String
  fileType     String
  fileSize     Int
  language     String   @default("es")
  genre        String?
  summary      String?
  wordCount    Int?
  pageCount    Int
  isProcessed  Boolean  @default(false)
  coverColor   String?  // Para generar portadas con colores aleatorios
  tags         String   // JSON string para SQLite
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  authorId String
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Referencia al usuario de Supabase
  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  segments        Segment[]
  favorites       Favorite[]
  readingProgress ReadingProgress[]
  annotations     Annotation[]
  notebooks       AnnotationNotebook[]

  @@map("documents")
}

model Segment {
  id           String @id @default(cuid())
  content      String
  segmentOrder Int
  segmentType  String // 'paragraph', 'heading', 'verse', etc.
  wordCount    Int?
  
  // Vector embeddings para búsqueda semántica (como string en SQLite)
  embedding    String? // JSON string para SQLite
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("segments")
}

model Favorite {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([userId, documentId])
  @@map("favorites")
}

model ReadingProgress {
  id               String @id @default(cuid())
  userId           String
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  documentId       String
  document         Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  currentPage      Int    @default(1)
  totalPages       Int
  progressPercent  Float  @default(0)
  isCompleted      Boolean @default(false)
  lastReadAt       DateTime @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, documentId])
  @@map("reading_progress")
}

model Annotation {
  id           String @id @default(cuid())
  content      String
  color        String @default("#fbbf24") // Color del highlight
  pageNumber   Int?
  position     String?  // JSON string para SQLite
  type         String @default("highlight") // 'highlight', 'note', 'bookmark'
  selectedText String? // Texto seleccionado para el highlight
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  // Relación con notebook (opcional)
  notebookId String?
  notebook   AnnotationNotebook? @relation(fields: [notebookId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("annotations")
}

// Cuadernos de anotaciones por contenido
model AnnotationNotebook {
  id          String @id @default(cuid())
  title       String
  content     String // Contenido rico del notebook (Markdown/HTML)
  isDefault   Boolean @default(false) // Notebook por defecto del documento
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  documentId String?
  document   Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  annotations Annotation[]
  references  ContentReference[] @relation("NotebookReferences")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("annotation_notebooks")
}

// Sistema de referencias cruzadas entre contenidos
model ContentReference {
  id              String @id @default(cuid())
  referenceText   String // Texto de la referencia "@contenido#123"
  targetType      String // 'document', 'segment', 'annotation'
  targetId        String // ID del contenido referenciado
  context         String? // Contexto adicional de la referencia
  
  // Notebook que contiene la referencia
  notebookId String
  notebook   AnnotationNotebook @relation("NotebookReferences", fields: [notebookId], references: [id], onDelete: Cascade)
  
  // Usuario que creó la referencia
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("content_references")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  authorId String
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)

  messages Message[]

  @@map("conversations")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  role      String   // 'user' | 'assistant'
  createdAt DateTime @default(now())

  // Relaciones
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Tabla para almacenar configuraciones del sistema (no del usuario)
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

// Modelo para preferencias de usuario (tabla user_preferences en Supabase)
model UserPreference {
  id                   String   @id @default(uuid())
  userId               String   @map("user_id")
  uiLanguage           String   @default("es") @map("ui_language")
  theme                String   @default("light")
  notificationsEnabled Boolean  @default(true) @map("notifications_enabled")
  autoSaveEnabled      Boolean  @default(true) @map("auto_save_enabled")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// Modelo para configuraciones de procesamiento (tabla user_processing_configs en Supabase)
model UserProcessingConfig {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  configName  String   @map("config_name")
  profileType String   @map("profile_type")
  configData  String   @map("config_data") // JSON string para SQLite
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, configName])
  @@map("user_processing_configs")
} 