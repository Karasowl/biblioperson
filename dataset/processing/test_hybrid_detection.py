#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de prueba para el nuevo sistema h√≠brido de detecci√≥n de autores.
Espec√≠ficamente dise√±ado para probar el caso de "Rub√©n Dar√≠o".
"""

import sys
import os
import json
from typing import Dict, Any, List

# Agregar el directorio de processing al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def create_test_segment_ruben_dario() -> List[Dict[str, Any]]:
    """Crea un segmento de prueba basado en el caso real de Rub√©n Dar√≠o"""
    return [{
        "segment_id": "3c8888f8-f431-400e-926d-0686099d007a",
        "document_id": "db3e7495-d067-4322-a9e4-8f254935880f",
        "document_language": "es",
        "text": """CANCI√ìN DE OTO√ëO EN PRIMAVERA
A Gregorio Martinez Sierra
Juventud, divino tesoro,
ya te vas para no volver!
Cuando quiero llorar, no lloro...
y veces lloro sin querer...
Plural ha sido la celeste
historia de mi coraz√≥n.
Era una dulce ni√±a, en este
mundo de duelo aflicci√≥n.
Miraba come el alba pura;
sonre√≠a como una flor.
Era su cabellera obscura
hecha de noche de dolor.
Yo era t√≠mido como un ni√±o.
Ella, naturalmente, fue,
para mi amor hecho de armi√±o,
Herodias Salom√©...
Juventud, divino tesoro,
ya te vas para no volver!
Cuando quiero llorar, no lloro...
y veces lloro sin querer...
Y mas consoladora mas
halagadora expresiva,
la otra fue mas sensitiva
cual no pens√© encontrar jam√°s.
Pues su continua ternura
una pasi√≥n violenta un√≠a.
En un peplo de gasa pura
una bacante se envolv√≠a...
En sus brazos tom√≥ mi ensue√±o
y lo arrull√≥ como un beb√©...
y le mat√≥, triste peque√±o,
falto de luz, falto de fe...
Juventud, divino tesoro,
ya te vas para no volver!
Cuando quiero llorar, no lloro...
y veces lloro sin querer...
Otra juzg√≥ que era mi boca
el estuche de su pasi√≥n;
y que me roer√≠a, loca,
con sus dientes el coraz√≥n.
Poniendo en un amor de exceso
la mira de su voluntad,
mientras eran abrazo beso
s√≠ntesis de la eternidad;
y de nuestra carne ligera
imaginar siempre un Ed√©n,
sin pensar que la Primavera
y la carne acaban tambi√©n...
Juventud, divino tesoro,
ya te vas para no volver!
Cuando quiero llorar, no lloro...
y veces lloro sin querer...
Y las dem√°s! En tantos climas,
en tantas tierras siempre son,
si no pretextos de mis rimas
fantasmas de mi coraz√≥n.
En vano busqu√© la princesa
que estaba triste de esperar.
La vida es dura. Amarga pesa.
Ya no hay princesa que cantar!
Mas pesar del tiempo terco,
mi sed de amor no tiene fin;
con el cabello gris, me acerco
a los rosales del jard√≠n...
Juventud, divino tesoro,
ya te vas para no volver!
Cuando quiero llorar, no lloro...
y veces lloro sin querer...
Mas es m√≠a el Alba de oro!""",
        "segment_type": "poem",
        "segment_order": 1,
        "text_length": 1942,
        "source_file_path": "C:\\Users\\adven\\Downloads\\Dario, Ruben - Antologia.pdf",
        "document_title": "Dario, Ruben - Antologia",
        "additional_metadata": {
            "segment_detected_author": "de Tantos Poetas",  # Detecci√≥n incorrecta anterior
            "segment_author_confidence": 0.6516666666666667,
            "segment_author_detection_method": "contextual_analysis"
        }
    }]

def test_hybrid_detection():
    """Prueba el sistema h√≠brido de detecci√≥n de autores"""
    print("=== PRUEBA DEL SISTEMA H√çBRIDO DE DETECCI√ìN DE AUTORES ===")
    print("Caso de prueba: Rub√©n Dar√≠o - Canci√≥n de Oto√±o en Primavera")
    print()
    
    # Crear segmento de prueba
    segments = create_test_segment_ruben_dario()
    
    # Configuraci√≥n de prueba
    config = {
        'use_hybrid_detection': True,
        'confidence_threshold': 0.3,
        'debug': True,
        'hybrid_config': {
            'enable_literary_database': True,
            'enable_stylometric_analysis': True,
            'enable_document_context_boost': True,
            'literary_authors_priority': True
        }
    }
    
    print("1. Probando detector h√≠brido...")
    try:
        from hybrid_author_detection import HybridAuthorDetector
        
        detector = HybridAuthorDetector(config)
        result = detector.detect_author(segments, 'verso')
        
        if result:
            print(f"‚úÖ √âXITO: Autor detectado: '{result['name']}'")
            print(f"   Confianza: {result['confidence']:.3f}")
            print(f"   M√©todo: {result['method']}")
            print(f"   Detalles: {json.dumps(result.get('details', {}), indent=2, ensure_ascii=False)}")
        else:
            print("‚ùå FALLO: No se detect√≥ ning√∫n autor")
            
    except ImportError as e:
        print(f"‚ùå ERROR DE IMPORTACI√ìN: {e}")
        return False
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False
    
    print()
    print("2. Probando funci√≥n de conveniencia detect_author_in_segments...")
    try:
        from author_detection import detect_author_in_segments
        
        result2 = detect_author_in_segments(
            segments, 
            'verso', 
            config,
            document_title="Dario, Ruben - Antologia",
            source_file_path="C:\\Users\\adven\\Downloads\\Dario, Ruben - Antologia.pdf"
        )
        
        if result2:
            print(f"‚úÖ √âXITO: Autor detectado: '{result2['name']}'")
            print(f"   Confianza: {result2['confidence']:.3f}")
            print(f"   M√©todo: {result2['method']}")
        else:
            print("‚ùå FALLO: No se detect√≥ ning√∫n autor")
            
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False
    
    print()
    print("3. Comparando con detector anterior...")
    try:
        from enhanced_contextual_author_detection import EnhancedContextualAuthorDetector
        
        old_detector = EnhancedContextualAuthorDetector(config)
        old_result = old_detector.detect_author(
            segments, 
            'verso',
            document_title="Dario, Ruben - Antologia",
            source_file_path="C:\\Users\\adven\\Downloads\\Dario, Ruben - Antologia.pdf"
        )
        
        if old_result:
            print(f"üìä DETECTOR ANTERIOR: '{old_result['name']}' (confianza: {old_result['confidence']:.3f})")
        else:
            print("üìä DETECTOR ANTERIOR: No detect√≥ autor")
            
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo probar detector anterior: {e}")
    
    return True

def test_stylometric_components():
    """Prueba los componentes estilom√©tricos individualmente"""
    print("\n=== PRUEBA DE COMPONENTES ESTILOM√âTRICOS ===")
    
    try:
        from stylometric_author_detection import StylometricAuthorDetector, LiteraryAuthorDatabase
        
        # Probar base de datos literaria
        print("1. Probando base de datos literaria...")
        db = LiteraryAuthorDatabase()
        
        # Buscar Rub√©n Dar√≠o
        ruben_info = db.get_author_info("Rub√©n Dar√≠o")
        if ruben_info:
            print(f"‚úÖ Rub√©n Dar√≠o encontrado en la base de datos:")
            print(f"   Nombre: {ruben_info['name']}")
            print(f"   Per√≠odo: {ruben_info['period']}")
            print(f"   Movimiento: {ruben_info['movement']}")
            print(f"   Nacionalidad: {ruben_info['nationality']}")
        else:
            print("‚ùå Rub√©n Dar√≠o no encontrado en la base de datos")
        
        # Probar detecci√≥n estilom√©trica
        print("\n2. Probando detector estilom√©trico...")
        segments = create_test_segment_ruben_dario()
        
        stylometric_detector = StylometricAuthorDetector()
        result = stylometric_detector.detect_author(segments, 'verso')
        
        if result:
            print(f"‚úÖ Resultado estilom√©trico: '{result['name']}' (confianza: {result['confidence']:.3f})")
            print(f"   M√©todo: {result['method']}")
        else:
            print("‚ùå No se obtuvo resultado estilom√©trico")
            
    except Exception as e:
        print(f"‚ùå ERROR en componentes estilom√©tricos: {e}")
        return False
    
    return True

def main():
    """Funci√≥n principal de prueba"""
    print("INICIANDO PRUEBAS DEL SISTEMA H√çBRIDO DE DETECCI√ìN DE AUTORES")
    print("=" * 70)
    
    success = True
    
    # Probar componentes estilom√©tricos
    if not test_stylometric_components():
        success = False
    
    # Probar detector h√≠brido
    if not test_hybrid_detection():
        success = False
    
    print("\n" + "=" * 70)
    if success:
        print("üéâ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE")
        print("\nüìã RESUMEN:")
        print("- ‚úÖ Sistema h√≠brido implementado")
        print("- ‚úÖ Base de datos de autores literarios funcional")
        print("- ‚úÖ An√°lisis estilom√©trico integrado")
        print("- ‚úÖ Detecci√≥n mejorada para casos como 'Rub√©n Dar√≠o'")
        print("\nüöÄ El sistema est√° listo para procesar documentos con mejor precisi√≥n.")
    else:
        print("‚ùå ALGUNAS PRUEBAS FALLARON")
        print("\nüîß Revisa los errores anteriores y verifica:")
        print("- Que todos los archivos est√©n en su lugar")
        print("- Que las importaciones funcionen correctamente")
        print("- Que la configuraci√≥n sea v√°lida")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)