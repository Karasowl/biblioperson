#!/usr/bin/env python3
"""
üîß TEST SIMPLE DE CORRECCIONES DE EXPORTACI√ìN
Verifica que las correcciones est√©n en el c√≥digo sin ejecutar todo el pipeline.
"""

import os
import tempfile
import json
from pathlib import Path

def test_code_corrections():
    """
    Verifica que las correcciones est√©n aplicadas en el c√≥digo.
    """
    print("üîß VERIFICANDO CORRECCIONES EN EL C√ìDIGO")
    print("=" * 50)
    
    # Archivos a verificar
    files_to_check = [
        "dataset/processing/profile_manager.py",
        "dataset/scripts/process_file.py",
        "dataset/scripts/ui/main_window.py"
    ]
    
    corrections_found = 0
    total_corrections = 0
    
    print("‚úÖ 1. VERIFICANDO ProfileManager.py:")
    profile_manager_path = "dataset/processing/profile_manager.py"
    if os.path.exists(profile_manager_path):
        with open(profile_manager_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar cambio en la definici√≥n de funci√≥n
        total_corrections += 1
        if "def process_file(self," in content and "output_file: Optional[str] = None" in content:
            print("  ‚úÖ Par√°metro output_file en process_file()")
            corrections_found += 1
        else:
            print("  ‚ùå Par√°metro output_file NO encontrado")
        
        # Verificar cambio en _export_results
        total_corrections += 1
        if "def _export_results(self, segments: List[Any], output_file: str" in content:
            print("  ‚úÖ Par√°metro output_file en _export_results()")
            corrections_found += 1
        else:
            print("  ‚ùå Par√°metro output_file en _export_results NO encontrado")
        
        # Verificar uso correcto en las llamadas internas
        total_corrections += 1
        if "self._export_results(processed_content_items, output_file," in content:
            print("  ‚úÖ Llamadas internas usando output_file")
            corrections_found += 1
        else:
            print("  ‚ùå Llamadas internas NO corregidas")
    
    print("\\n‚úÖ 2. VERIFICANDO process_file.py:")
    process_file_path = "dataset/scripts/process_file.py"
    if os.path.exists(process_file_path):
        with open(process_file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar que la llamada use output_file
        total_corrections += 1
        if "output_file=str(output_file_path)" in content:
            print("  ‚úÖ Llamada a manager.process_file usa output_file")
            corrections_found += 1
        else:
            print("  ‚ùå Llamada a manager.process_file NO corregida")
    
    print("\\n‚úÖ 3. VERIFICANDO main_window.py:")
    main_window_path = "dataset/scripts/ui/main_window.py"
    if os.path.exists(main_window_path):
        with open(main_window_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar funci√≥n _get_output_format corregida
        total_corrections += 1
        if 'return "json"  # ‚úÖ CORREGIDO: min√∫sculas' in content:
            print("  ‚úÖ _get_output_format devuelve min√∫sculas")
            corrections_found += 1
        else:
            print("  ‚ùå _get_output_format NO corregida")
        
        # Verificar filtros de archivo actualizados
        total_corrections += 1
        if "current_format = self._get_output_format()" in content and "if current_format == \"json\":" in content:
            print("  ‚úÖ Di√°logo de archivo actualizado")
            corrections_found += 1
        else:
            print("  ‚ùå Di√°logo de archivo NO corregido")
    
    print(f"\\nüìä RESUMEN: {corrections_found}/{total_corrections} correcciones encontradas")
    
    if corrections_found == total_corrections:
        print("üéâ ¬°TODAS LAS CORRECCIONES EST√ÅN APLICADAS!")
        return True
    else:
        print("‚ùå FALTAN ALGUNAS CORRECCIONES")
        return False

def test_export_logic():
    """
    Simula la l√≥gica de exportaci√≥n para verificar que funciona correctamente.
    """
    print("\\n" + "=" * 50)
    print("üîß SIMULANDO L√ìGICA DE EXPORTACI√ìN")
    print("=" * 50)
    
    def simulate_export_logic(output_path_str, segments, format_type="ndjson"):
        """Simula la l√≥gica corregida de _export_results"""
        
        try:
            output_path = Path(output_path_str)
            
            # ‚úÖ CORRECCI√ìN: Solo crear directorio padre, no el archivo como directorio
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Escribir archivo
            with open(output_path, 'w', encoding='utf-8') as f:
                if format_type == "json":
                    json.dump({"segments": segments}, f)
                else:
                    for segment in segments:
                        f.write(json.dumps(segment) + '\\n')
            
            # Verificar resultado
            if output_path.exists() and output_path.is_file():
                return True, f"Archivo creado correctamente: {output_path}"
            elif output_path.exists() and output_path.is_dir():
                return False, f"ERROR: Se cre√≥ directorio en lugar de archivo: {output_path}"
            else:
                return False, f"ERROR: No se cre√≥ nada"
                
        except Exception as e:
            return False, f"Excepci√≥n: {str(e)}"
    
    # Datos de prueba
    test_segments = [
        {"id": 1, "text": "Primer poema", "type": "poem"},
        {"id": 2, "text": "Segundo poema", "type": "poem"}
    ]
    
    # Usar directorio temporal
    with tempfile.TemporaryDirectory() as temp_dir:
        test_files = [
            (Path(temp_dir) / "test.ndjson", "ndjson"),
            (Path(temp_dir) / "test.json", "json")
        ]
        
        all_passed = True
        for test_file, format_type in test_files:
            success, message = simulate_export_logic(str(test_file), test_segments, format_type)
            if success:
                print(f"  ‚úÖ {format_type.upper()}: {message}")
            else:
                print(f"  ‚ùå {format_type.upper()}: {message}")
                all_passed = False
        
        return all_passed

if __name__ == "__main__":
    success1 = test_code_corrections()
    success2 = test_export_logic()
    
    if success1 and success2:
        print(f"\\nüéâ ¬°TODAS LAS VERIFICACIONES PASARON!")
        exit(0)
    else:
        print(f"\\n‚ùå ALGUNAS VERIFICACIONES FALLARON")
        exit(1) 