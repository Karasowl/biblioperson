#!/usr/bin/env python3
"""
Debug espec√≠fico para PDFLoader - Investigar por qu√© marca como corrupto 
un PDF que visualmente est√° bien y anteriormente produc√≠a 60 poemas.
"""

import sys
import os
import re
import fitz
from pathlib import Path

# Agregar el directorio del proyecto al path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def analyze_pdf_extraction_methods():
    """Analiza diferentes m√©todos de extracci√≥n de texto del PDF"""
    
    pdf_path = r"C:\Users\adven\Downloads\Mario Benedetti Antologia Po√©tica.pdf"
    
    if not os.path.exists(pdf_path):
        print(f"‚ùå El archivo no existe: {pdf_path}")
        return
    
    print("üîç AN√ÅLISIS DETALLADO DE EXTRACCI√ìN PDF")
    print(f"üìÑ Archivo: {pdf_path}")
    print("=" * 80)
    
    # Abrir el PDF
    try:
        doc = fitz.open(pdf_path)
        print(f"‚úÖ PDF abierto exitosamente")
        print(f"üìä P√°ginas: {len(doc)}")
        print()
    except Exception as e:
        print(f"‚ùå Error abriendo PDF: {e}")
        return
    
    # Analizar primera p√°gina con diferentes m√©todos
    page = doc[0]
    
    print("üß™ M√âTODO 1: get_text() - TEXTO PLANO")
    print("-" * 50)
    try:
        text_plain = page.get_text()
        print(f"üìè Longitud: {len(text_plain)} caracteres")
        print(f"üìù Primeros 300 chars: {repr(text_plain[:300])}")
        print(f"üî§ Texto real: {text_plain[:200]}")
        print()
        
        # Analizar caracteres
        analyze_character_composition(text_plain, "TEXTO PLANO")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    print("\nüß™ M√âTODO 2: get_text('blocks') - BLOQUES")
    print("-" * 50)
    try:
        blocks = page.get_text("blocks")
        print(f"üì¶ Bloques encontrados: {len(blocks)}")
        
        all_block_text = ""
        for i, block in enumerate(blocks[:5]):  # Primeros 5 bloques
            if len(block) >= 5:
                block_text = str(block[4])
                all_block_text += block_text + "\n"
                print(f"  üìÑ Bloque {i+1}: {repr(block_text[:100])}")
                print(f"    üî§ Texto: {block_text[:100]}")
        
        analyze_character_composition(all_block_text, "BLOQUES")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    print("\nüß™ M√âTODO 3: get_text('dict') - DICCIONARIO CON FORMATO")
    print("-" * 50)
    try:
        page_dict = page.get_text("dict")
        
        all_dict_text = ""
        block_count = 0
        
        for block in page_dict.get("blocks", []):
            if "lines" not in block:
                continue
                
            block_count += 1
            block_text = ""
            
            for line in block["lines"]:
                for span in line["spans"]:
                    text = span["text"]
                    block_text += text + " "
            
            if block_text.strip():
                all_dict_text += block_text + "\n"
                if block_count <= 3:  # Mostrar primeros 3 bloques
                    print(f"  üìÑ Bloque {block_count}: {repr(block_text[:100])}")
                    print(f"    üî§ Texto: {block_text[:100]}")
        
        print(f"üì¶ Bloques procesados: {block_count}")
        analyze_character_composition(all_dict_text, "DICCIONARIO")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    print("\nüß™ M√âTODO 4: get_text('html') - HTML")
    print("-" * 50)
    try:
        html_text = page.get_text("html")
        # Extraer solo texto sin tags HTML
        import re
        clean_html = re.sub(r'<[^>]+>', ' ', html_text)
        clean_html = re.sub(r'\s+', ' ', clean_html).strip()
        
        print(f"üìè Longitud HTML: {len(html_text)} chars, limpio: {len(clean_html)} chars")
        print(f"üî§ Texto HTML limpio: {clean_html[:200]}")
        
        analyze_character_composition(clean_html, "HTML")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    doc.close()
    
    print("\n" + "=" * 80)
    print("üèÅ AN√ÅLISIS COMPLETADO")
    print("\nüí° RECOMENDACIONES:")
    print("1. Si alg√∫n m√©todo muestra texto legible, el PDF NO est√° corrupto")
    print("2. Si todos muestran caracteres extra√±os, el problema est√° en el PDF")
    print("3. Si hay texto legible, el algoritmo de limpieza es demasiado agresivo")

def analyze_character_composition(text, method_name):
    """Analiza la composici√≥n de caracteres del texto extra√≠do"""
    if not text:
        print(f"‚ùå {method_name}: Sin texto extra√≠do")
        return
    
    # Contadores
    total_chars = len(text)
    ascii_letters = len(re.findall(r'[a-zA-Z]', text))
    spanish_chars = len(re.findall(r'[√°√©√≠√≥√∫√º√±√Å√â√ç√ì√ö√ú√ë]', text))
    numbers = len(re.findall(r'[0-9]', text))
    punctuation = len(re.findall(r'[.,;:!?¬ø¬°()"\'-]', text))
    spaces = len(re.findall(r'\s', text))
    
    # Caracteres "legibles" seg√∫n el algoritmo actual
    current_algo_readable = len(re.findall(r'[a-zA-Z√°√©√≠√≥√∫√º√±√Å√â√ç√ì√ö√ú√ë0-9\s.,;:!?¬ø¬°()"\'-]', text))
    
    # Otros caracteres
    other_chars = total_chars - (ascii_letters + spanish_chars + numbers + punctuation + spaces)
    
    print(f"üìä COMPOSICI√ìN DE CARACTERES - {method_name}:")
    print(f"  üìè Total: {total_chars}")
    print(f"  üî§ Letras ASCII: {ascii_letters} ({ascii_letters/total_chars*100:.1f}%)")
    print(f"  üá™üá∏ Letras espa√±olas: {spanish_chars} ({spanish_chars/total_chars*100:.1f}%)")
    print(f"  üî¢ N√∫meros: {numbers} ({numbers/total_chars*100:.1f}%)")
    print(f"  üìù Puntuaci√≥n: {punctuation} ({punctuation/total_chars*100:.1f}%)")
    print(f"  ‚≠ê Espacios: {spaces} ({spaces/total_chars*100:.1f}%)")
    print(f"  ‚ùì Otros: {other_chars} ({other_chars/total_chars*100:.1f}%)")
    print(f"  ‚úÖ Legibles (algoritmo actual): {current_algo_readable} ({current_algo_readable/total_chars*100:.1f}%)")
    
    if other_chars > 0:
        # Mostrar algunos de los "otros" caracteres
        other_char_examples = []
        for char in text:
            if not re.match(r'[a-zA-Z√°√©√≠√≥√∫√º√±√Å√â√ç√ì√ö√ú√ë0-9\s.,;:!?¬ø¬°()"\'-]', char):
                other_char_examples.append(f"'{char}'({ord(char)})")
                if len(other_char_examples) >= 10:
                    break
        
        if other_char_examples:
            print(f"  üîç Ejemplos de 'otros': {', '.join(other_char_examples[:5])}")
    
    # Determinar si es "corrupto" seg√∫n algoritmo actual
    corruption_ratio = 1.0 - (current_algo_readable / total_chars)
    print(f"  üö® Corrupci√≥n detectada: {corruption_ratio*100:.1f}%")
    
    if corruption_ratio > 0.2:
        print(f"  ‚ö†Ô∏è ALGORITMO ACTUAL MARCARIA COMO CORRUPTO")
    else:
        print(f"  ‚úÖ ALGORITMO ACTUAL LO ACEPTAR√çA")
    
    print()

if __name__ == "__main__":
    analyze_pdf_extraction_methods() 