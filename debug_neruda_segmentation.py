#!/usr/bin/env python3
"""
Debug espec√≠fico para PDF de Neruda - Analizar por qu√© est√° detectando solo 12 segmentos
en lugar de los ~20+ poemas esperados.
"""

import sys
import os
import json
from pathlib import Path

# Agregar el directorio del proyecto al path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from dataset.processing.loaders.pdf_loader import PDFLoader
from dataset.processing.segmenters.verse_segmenter import VerseSegmenter

def analyze_neruda_segmentation():
    """Analiza por qu√© el PDF de Neruda detecta menos segmentos de los esperados"""
    
    pdf_path = r"C:\Users\adven\Downloads\Neruda Pablo_20 Poemas De Amor Y Una Cancion Desesperada.pdf"
    
    if not os.path.exists(pdf_path):
        print(f"‚ùå El archivo no existe: {pdf_path}")
        print("üìù Nota: Ajusta la ruta del archivo seg√∫n tu sistema")
        return
    
    print("üîç AN√ÅLISIS DETALLADO DE SEGMENTACI√ìN - NERUDA")
    print(f"üìÑ Archivo: {pdf_path}")
    print("üìä Expectativa: ~20+ poemas | Detectado: 12 segmentos")
    print("=" * 80)
    
    # PASO 1: Cargar documento con PDFLoader V7.2
    print("üìã PASO 1: AN√ÅLISIS DEL PDFLOADER V7.2")
    print("-" * 50)
    
    try:
        loader = PDFLoader(pdf_path)
        result = loader.load()
        blocks = result.get('blocks', [])
        metadata = result.get('metadata', {})
        
        print(f"‚úÖ PDFLoader completado")
        print(f"üì¶ Bloques generados: {len(blocks)}")
        print(f"üìÑ P√°ginas del PDF: {metadata.get('page_count', 'N/A')}")
        print(f"üìä Ratio bloques/p√°ginas: {len(blocks) / metadata.get('page_count', 1):.2f}")
        print()
        
        # Analizar calidad del texto
        total_text = ""
        readable_blocks = 0
        
        for i, block in enumerate(blocks):
            text = block.get('text', '')
            total_text += text
            
            # Verificar si el bloque tiene texto legible
            import re
            readable_chars = len(re.findall(r'[a-zA-Z√°√©√≠√≥√∫√º√±√Å√â√ç√ì√ö√ú√ë]', text))
            if readable_chars > len(text) * 0.5:  # 50% legible
                readable_blocks += 1
            
            # Mostrar primeros bloques para diagn√≥stico
            if i < 5:
                print(f"  üìÑ Bloque {i+1}:")
                print(f"    üìè Longitud: {len(text)} caracteres")
                print(f"    üìä Legibilidad: {readable_chars}/{len(text)} ({readable_chars/len(text)*100:.1f}%)")
                print(f"    üìù Preview: {repr(text[:100])}...")
                print()
        
        print(f"üìä CALIDAD GENERAL:")
        print(f"  üìù Texto total: {len(total_text)} caracteres")
        print(f"  ‚úÖ Bloques legibles: {readable_blocks}/{len(blocks)} ({readable_blocks/len(blocks)*100:.1f}%)")
        
        # Calcular ratio de corrupci√≥n general
        import re
        total_readable = len(re.findall(r'[a-zA-Z√°√©√≠√≥√∫√º√±√Å√â√ç√ì√ö√ú√ë0-9\s.,;:!?¬ø¬°()"\'-]', total_text))
        corruption_ratio = 1.0 - (total_readable / len(total_text)) if total_text else 1.0
        print(f"  üîç Corrupci√≥n detectada: {corruption_ratio*100:.1f}%")
        print()
        
    except Exception as e:
        print(f"‚ùå Error en PDFLoader: {e}")
        return
    
    # PASO 2: An√°lisis detallado del VerseSegmenter
    print("üìã PASO 2: AN√ÅLISIS DETALLADO DEL VERSESEGMENTER")
    print("-" * 50)
    
    try:
        segmenter = VerseSegmenter()
        
        # Habilitar logging detallado
        import logging
        logging.basicConfig(level=logging.DEBUG, format='%(message)s')
        
        print("üîÑ Ejecutando segmentaci√≥n con logging detallado...")
        segments = segmenter.segment(blocks)
        
        print(f"\n‚úÖ Segmentaci√≥n completada")
        print(f"üé≠ Segmentos detectados: {len(segments)}")
        print(f"üìä Ratio segmentos/p√°ginas: {len(segments) / metadata.get('page_count', 1):.2f}")
        print()
        
        # Analizar cada segmento
        print("üîç AN√ÅLISIS DETALLADO DE SEGMENTOS:")
        for i, segment in enumerate(segments):
            title = segment.get('title', 'Sin t√≠tulo')
            text = segment.get('text', '')
            method = segment.get('detection_method', 'principal')
            
            print(f"  üé≠ Segmento {i+1}:")
            print(f"    üéØ T√≠tulo: '{title}'")
            print(f"    üìè Longitud: {len(text)} caracteres")
            print(f"    üìä Versos: {segment.get('verse_count', 0)}")
            print(f"    üîß M√©todo: {method}")
            print(f"    üìù Preview: {repr(text[:150])}...")
            
            # Contar posibles t√≠tulos internos en segmentos largos
            if len(text) > 1000:  # Segmento potencialmente largo
                lines = text.split('\n')
                potential_internal_titles = []
                
                for line in lines:
                    line = line.strip()
                    if line and len(line) < 100:
                        # Buscar patrones de t√≠tulos de poemas
                        if (line.isupper() and len(line) < 60) or \
                           (line.isdigit() and int(line) <= 50) or \
                           (len(line.split()) <= 6 and not line.endswith('.') and not line.endswith(',')) or \
                           (line.startswith('"') and line.endswith('"')):
                            potential_internal_titles.append(line)
                
                if potential_internal_titles:
                    print(f"    ‚ö†Ô∏è POSIBLES T√çTULOS INTERNOS: {len(potential_internal_titles)}")
                    for j, internal_title in enumerate(potential_internal_titles[:5]):
                        print(f"      üìç '{internal_title}'")
                    if len(potential_internal_titles) > 5:
                        print(f"      üìç ... y {len(potential_internal_titles)-5} m√°s")
            
            print()
        
    except Exception as e:
        print(f"‚ùå Error en VerseSegmenter: {e}")
        import traceback
        traceback.print_exc()
        return
    
    # PASO 3: C√°lculo de expectativas vs realidad
    print("üìã PASO 3: AN√ÅLISIS DE EXPECTATIVAS VS REALIDAD")
    print("-" * 50)
    
    expected_poems = 20  # "20 Poemas de Amor"
    detected_segments = len(segments)
    pages = metadata.get('page_count', 1)
    
    print(f"üìä M√âTRICAS:")
    print(f"  üìñ Poemas esperados: ~{expected_poems}")
    print(f"  üé≠ Segmentos detectados: {detected_segments}")
    print(f"  üìÑ P√°ginas del PDF: {pages}")
    print(f"  üìâ D√©ficit: {expected_poems - detected_segments} poemas no detectados")
    print()
    
    # Algoritmo para determinar si necesita OCR
    ratio_segments_per_page = detected_segments / pages
    expected_ratio = expected_poems / pages
    
    print(f"üìä RATIOS:")
    print(f"  üìä Segmentos/p√°gina detectado: {ratio_segments_per_page:.2f}")
    print(f"  üìä Segmentos/p√°gina esperado: {expected_ratio:.2f}")
    print()
    
    # Determinar si necesita OCR
    needs_ocr = False
    ocr_reasons = []
    
    if corruption_ratio > 0.2:  # M√°s del 20% corrupto
        needs_ocr = True
        ocr_reasons.append(f"Alta corrupci√≥n: {corruption_ratio*100:.1f}%")
    
    if ratio_segments_per_page < 0.5:  # Menos de 0.5 segmentos por p√°gina
        needs_ocr = True
        ocr_reasons.append(f"Muy pocos segmentos por p√°gina: {ratio_segments_per_page:.2f}")
    
    if detected_segments < expected_poems * 0.6:  # Menos del 60% de poemas esperados
        needs_ocr = True
        ocr_reasons.append(f"Poemas insuficientes: {detected_segments}/{expected_poems}")
    
    if readable_blocks < len(blocks) * 0.8:  # Menos del 80% de bloques legibles
        needs_ocr = True
        ocr_reasons.append(f"Bloques ilegibles: {readable_blocks}/{len(blocks)}")
    
    print("üéØ DIAGN√ìSTICO FINAL:")
    if needs_ocr:
        print("‚ùå REQUIERE OCR - Razones:")
        for reason in ocr_reasons:
            print(f"  ‚Ä¢ {reason}")
        print()
        print("üí° RECOMENDACI√ìN: Implementar OCR autom√°tico como fallback")
    else:
        print("‚úÖ NO REQUIERE OCR - Calidad de extracci√≥n aceptable")
        print("üí° RECOMENDACI√ìN: Mejorar algoritmo de segmentaci√≥n de t√≠tulos")
    
    print("\n" + "=" * 80)
    print("üèÅ AN√ÅLISIS COMPLETADO")

if __name__ == "__main__":
    analyze_neruda_segmentation() 