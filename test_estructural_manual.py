#!/usr/bin/env python3
"""
üîß TEST MANUAL: SIMULACI√ìN FILTRADO ESTRUCTURAL
Simula el comportamiento que tendr√≠a con un documento real tipo "Antolog√≠a Rub√©n Dar√≠o".
"""

import sys
import os
sys.path.append('dataset')

def test_simulated_anthology():
    print("üîß TEST: SIMULACI√ìN ANTOLOG√çA CON ELEMENTOS ESTRUCTURALES")
    print("=" * 70)
    
    try:
        from processing.pre_processors.common_block_preprocessor import CommonBlockPreprocessor
        
        # Simular un documento t√≠pico con headers/footers repetitivos
        # Basado en el ejemplo del usuario: "Antolog√≠a Rub√©n Dar√≠o" en cada p√°gina
        simulated_blocks = []
        
        # Simular 50 p√°ginas de un libro de poes√≠a
        for page in range(1, 51):
            # Header repetitivo en cada p√°gina
            simulated_blocks.append({
                "text": "Antolog√≠a Rub√©n Dar√≠o",
                "metadata": {"page_number": page, "type": "header"}
            })
            
            # Footer ocasional (70% de p√°ginas) - debajo del umbral
            if page % 10 <= 7:  # 70% de p√°ginas
                simulated_blocks.append({
                    "text": f"P√°gina {page}",
                    "metadata": {"page_number": page, "type": "footer"}
                })
            
            # Contenido real variado por p√°gina
            if page <= 10:  # Primeras p√°ginas - MARCHA TRIUNFAL
                simulated_blocks.extend([
                    {"text": "MARCHA TRIUNFAL", "metadata": {"page_number": page}},
                    {"text": "Ya viene el cortejo!", "metadata": {"page_number": page}},
                    {"text": "La espada se anuncia con vivo reflejo;", "metadata": {"page_number": page}},
                ])
            elif page <= 20:  # P√°ginas 11-20 - SOUVENIR
                simulated_blocks.extend([
                    {"text": "SOUVENIR", "metadata": {"page_number": page}},
                    {"text": "En el agua clara", "metadata": {"page_number": page}},
                    {"text": "que brota de la fuente", "metadata": {"page_number": page}},
                ])
            elif page <= 30:  # P√°ginas 21-30 - CANTARES
                simulated_blocks.extend([
                    {"text": "CANTARES DEL CARD√ìN", "metadata": {"page_number": page}},
                    {"text": "Del desierto vengo", "metadata": {"page_number": page}},
                    {"text": "cantando mis penas", "metadata": {"page_number": page}},
                ])
            else:  # P√°ginas 31-50 - Contenido variado
                poem_num = page - 30
                simulated_blocks.extend([
                    {"text": f"POEMA {poem_num}", "metadata": {"page_number": page}},
                    {"text": f"Verso {poem_num} l√≠nea 1", "metadata": {"page_number": page}},
                    {"text": f"Verso {poem_num} l√≠nea 2", "metadata": {"page_number": page}},
                ])
        
        print(f"üìö Documento simulado: {len(simulated_blocks)} bloques en 50 p√°ginas")
        print(f"   - 'Antolog√≠a Rub√©n Dar√≠o' aparece en 50/50 p√°ginas (100%)")
        print(f"   - 'P√°gina N' aparece en ~35/50 p√°ginas (70%)")
        
        # Configurar filtrado estructural
        config = {
            'filter_structural_elements': True,
            'structural_frequency_threshold': 0.9,  # 90% de p√°ginas
            'min_pages_for_structural_detection': 5,
        }
        
        preprocessor = CommonBlockPreprocessor(config=config)
        
        # Detectar elementos estructurales
        structural_elements = preprocessor._detect_structural_elements(simulated_blocks)
        
        print(f"\nüìä DETECCI√ìN DE ELEMENTOS ESTRUCTURALES:")
        print(f"  - Elementos detectados: {len(structural_elements)}")
        
        for elem in structural_elements:
            # Calcular frecuencia real
            count = sum(1 for b in simulated_blocks if b.get('text', '').strip() == elem)
            frequency = (count / 50) * 100  # 50 p√°ginas total
            print(f"    üö´ '{elem}' ({count} apariciones, {frequency:.1f}%)")
        
        # Verificar detecci√≥n esperada
        expected_structural = "Antolog√≠a Rub√©n Dar√≠o"
        unexpected_structural = "P√°gina"  # No deber√≠a detectarse (solo 70%)
        
        success = True
        
        if expected_structural in structural_elements:
            print(f"\n‚úÖ CORRECTO: '{expected_structural}' detectado como estructural")
        else:
            print(f"\n‚ùå ERROR: '{expected_structural}' NO detectado como estructural")
            success = False
        
        # Verificar que elementos con frecuencia menor no se detecten
        has_page_elements = any("P√°gina" in elem for elem in structural_elements)
        if not has_page_elements:
            print(f"‚úÖ CORRECTO: Elementos 'P√°gina N' NO detectados (frecuencia 70% < umbral 90%)")
        else:
            print(f"‚ö†Ô∏è ATENCI√ìN: Algunos elementos 'P√°gina N' fueron detectados")
        
        # Filtrar elementos estructurales
        filtered_blocks = preprocessor._filter_structural_elements(simulated_blocks, structural_elements)
        
        print(f"\nüìä FILTRADO:")
        print(f"  - Bloques originales: {len(simulated_blocks)}")
        print(f"  - Bloques filtrados: {len(filtered_blocks)}")
        print(f"  - Bloques eliminados: {len(simulated_blocks) - len(filtered_blocks)}")
        
        # Verificar que el contenido po√©tico se preserv√≥
        filtered_texts = [b.get('text', '') for b in filtered_blocks]
        preserved_poems = ["MARCHA TRIUNFAL", "SOUVENIR", "CANTARES DEL CARD√ìN", "POEMA 1"]
        preserved_count = sum(1 for poem in preserved_poems if poem in filtered_texts)
        
        print(f"\nüìù CONTENIDO PRESERVADO:")
        print(f"  - Poemas preservados: {preserved_count}/{len(preserved_poems)}")
        for poem in preserved_poems:
            status = "‚úÖ" if poem in filtered_texts else "‚ùå"
            print(f"    {status} '{poem}'")
        
        # Verificar que elementos estructurales fueron eliminados
        structural_removed = expected_structural not in filtered_texts
        
        if structural_removed and preserved_count >= 3:
            print(f"\nüéâ FILTRADO ESTRUCTURAL EXITOSO:")
            print(f"   - Elementos estructurales eliminados")
            print(f"   - Contenido po√©tico preservado")
            return True
        else:
            print(f"\n‚ùå PROBLEMAS EN EL FILTRADO:")
            if not structural_removed:
                print(f"   - Elementos estructurales NO eliminados")
            if preserved_count < 3:
                print(f"   - Demasiado contenido po√©tico eliminado")
            return False
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_edge_case_thresholds():
    """
    Testa diferentes umbrales de detecci√≥n.
    """
    print("\nüîß TEST: UMBRALES DE DETECCI√ìN")
    print("=" * 50)
    
    try:
        from processing.pre_processors.common_block_preprocessor import CommonBlockPreprocessor
        
        # Documento con elemento que aparece en 85% de p√°ginas
        test_blocks = []
        for page in range(1, 21):  # 20 p√°ginas
            # Elemento que aparece en 17/20 p√°ginas (85%)
            if page <= 17:
                test_blocks.append({
                    "text": "Header 85%",
                    "metadata": {"page_number": page}
                })
            
            # Contenido normal
            test_blocks.append({
                "text": f"Contenido p√°gina {page}",
                "metadata": {"page_number": page}
            })
        
        # Test con umbral 90% (NO deber√≠a detectar)
        config_90 = {
            'filter_structural_elements': True,
            'structural_frequency_threshold': 0.9,  # 90%
            'min_pages_for_structural_detection': 5,
        }
        
        preprocessor_90 = CommonBlockPreprocessor(config=config_90)
        structural_90 = preprocessor_90._detect_structural_elements(test_blocks)
        
        # Test con umbral 80% (S√ç deber√≠a detectar)
        config_80 = {
            'filter_structural_elements': True,
            'structural_frequency_threshold': 0.8,  # 80%
            'min_pages_for_structural_detection': 5,
        }
        
        preprocessor_80 = CommonBlockPreprocessor(config=config_80)
        structural_80 = preprocessor_80._detect_structural_elements(test_blocks)
        
        print(f"üìä RESULTADOS UMBRALES:")
        print(f"  - Elemento aparece en 17/20 p√°ginas (85%)")
        print(f"  - Umbral 90%: {len(structural_90)} elementos detectados")
        print(f"  - Umbral 80%: {len(structural_80)} elementos detectados")
        
        # Verificar comportamiento esperado
        success = True
        
        if len(structural_90) == 0:
            print(f"  ‚úÖ Umbral 90%: Correcto (85% < 90%, no detecta)")
        else:
            print(f"  ‚ùå Umbral 90%: Error (detect√≥ elemento debajo del umbral)")
            success = False
        
        if len(structural_80) > 0 and "Header 85%" in structural_80:
            print(f"  ‚úÖ Umbral 80%: Correcto (85% > 80%, s√≠ detecta)")
        else:
            print(f"  ‚ùå Umbral 80%: Error (no detect√≥ elemento arriba del umbral)")
            success = False
        
        return success
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success1 = test_simulated_anthology()
    success2 = test_edge_case_thresholds()
    
    if success1 and success2:
        print(f"\nüéâ TODOS LOS TESTS PASARON - FILTRADO ESTRUCTURAL PERFECTO")
        print(f"\nüìã RESUMEN:")
        print(f"   ‚úÖ Detecci√≥n de elementos estructurales (>90% p√°ginas)")
        print(f"   ‚úÖ Filtrado correcto de headers/footers repetitivos")
        print(f"   ‚úÖ Preservaci√≥n de contenido po√©tico")
        print(f"   ‚úÖ Umbrales de frecuencia funcionando")
        print(f"\nüöÄ READY: La funcionalidad est√° lista para uso en producci√≥n")
        exit(0)
    else:
        print(f"\n‚ùå ALGUNOS TESTS FALLARON")
        exit(1) 