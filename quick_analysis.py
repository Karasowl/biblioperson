#!/usr/bin/env python3
"""
An√°lisis r√°pido de archivos no soportados basado en logs de TSC
"""

def main():
    # Datos del resumen de logs
    total_archivos = 211
    exitosos = 94
    errores = 117
    
    print('üîç AN√ÅLISIS DE ARCHIVOS NO SOPORTADOS DE TSC')
    print('=' * 60)
    print()
    print('üìä RESUMEN GENERAL:')
    print(f'   ‚Ä¢ Total de archivos encontrados: {total_archivos}')
    print(f'   ‚Ä¢ Total de archivos exitosos: {exitosos}')
    print(f'   ‚Ä¢ Total de archivos fallidos: {errores}')
    print(f'   ‚Ä¢ Tasa de √©xito: {(exitosos/total_archivos)*100:.1f}%')
    print(f'   ‚Ä¢ Tasa de error: {(errores/total_archivos)*100:.1f}%')
    print()
    
    # Estimaci√≥n basada en muestra de logs visible
    extensiones_estimadas = {
        '.docx': 25,    # Muchos documentos Word fallaron
        '.xlsx': 20,    # Hojas de c√°lculo Excel
        '.key': 8,      # Claves privadas
        '.cer': 6,      # Certificados
        '.req': 4,      # Requerimientos de certificados
        '.pfx': 2,      # Certificados empaquetados
        '.png': 4,      # Im√°genes PNG
        '.jpg': 2,      # Im√°genes JPG
        '.mp4': 3,      # Videos
        '.html': 4,     # Archivos web
        '.zip': 1,      # Archivos comprimidos
        '.ini': 1,      # Archivos de configuraci√≥n
        '.sdg': 2,      # Archivos de firma digital
    }
    
    print('üìã CONTEO ESTIMADO POR EXTENSI√ìN:')
    total_estimado = 0
    for ext, count in sorted(extensiones_estimadas.items(), key=lambda x: x[1], reverse=True):
        print(f'   {ext:8} ‚Üí {count:3} archivos')
        total_estimado += count
    
    otros = errores - total_estimado
    if otros > 0:
        print(f'   {"Otros":8} ‚Üí {otros:3} archivos')
    
    print(f'\nTotal estimado: {errores} archivos')
    
    print('\nüìÅ CATEGOR√çAS PRINCIPALES:')
    
    categories = {
        "üîê Certificados/Llaves": ['.key', '.cer', '.req', '.pfx', '.sdg'],
        "üìä Hojas de c√°lculo": ['.xlsx'],
        "üìù Documentos Word": ['.docx'],
        "üñºÔ∏è Im√°genes": ['.png', '.jpg'],
        "üé• Videos": ['.mp4'],
        "üåê Archivos web": ['.html'],
        "üóúÔ∏è Archivos comprimidos": ['.zip'],
        "‚öôÔ∏è Sistema/Config": ['.ini']
    }
    
    for categoria, extensiones in categories.items():
        total_categoria = sum(extensiones_estimadas.get(ext, 0) for ext in extensiones)
        if total_categoria > 0:
            print(f'\n   {categoria} ({total_categoria} archivos):')
            for ext in extensiones:
                count = extensiones_estimadas.get(ext, 0)
                if count > 0:
                    porcentaje = (count/errores)*100
                    print(f'      {ext:8} ‚Üí {count:3} archivos ({porcentaje:.1f}% del total)')
    
    print(f'\nüí° PRINCIPALES PROBLEMAS IDENTIFICADOS:')
    print(f'   1. üìù Documentos Word (.docx): ~25 archivos (~21% de errores)')
    print(f'      - Posible corrupci√≥n o formatos no est√°ndar')
    print(f'      - Documentos con contrase√±a o protegidos')
    print(f'   2. üìä Hojas Excel (.xlsx): ~20 archivos (~17% de errores)')
    print(f'      - Archivos binarios complejos')
    print(f'      - Hojas con macros o formatos especiales')
    print(f'   3. üîê Certificados/Llaves: ~22 archivos (~19% de errores)')
    print(f'      - Archivos binarios sin contenido de texto')
    print(f'      - No deber√≠an procesarse como documentos')
    print(f'   4. üñºÔ∏è Multimedia: ~9 archivos (~8% de errores)')
    print(f'      - Im√°genes (.png, .jpg) y videos (.mp4)')
    print(f'      - Requieren OCR o transcripci√≥n')
    
    print(f'\n‚úÖ RECOMENDACIONES:')
    print(f'   ‚Ä¢ Para .docx/.xlsx: Verificar integridad y agregar manejo de errores')
    print(f'   ‚Ä¢ Para certificados: Excluir del procesamiento o crear filtro')
    print(f'   ‚Ä¢ Para im√°genes: Implementar OCR si contienen texto relevante')
    print(f'   ‚Ä¢ Para videos: Extraer subt√≠tulos o transcripciones si es necesario')
    print(f'   ‚Ä¢ Para HTML: Agregar parser HTML b√°sico')

if __name__ == "__main__":
    main() 