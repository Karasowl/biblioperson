#!/usr/bin/env python3
"""
Test DIRECTO para verificar si la fusi√≥n de p√°ginas funciona
espec√≠ficamente para el caso "atractivo" + "de esta idea"
"""

import sys
import os

# Agregar el path del proyecto
sys.path.insert(0, os.path.abspath('.'))

def test_fusion_directa():
    """Test directo de la fusi√≥n sin usar el pipeline completo"""
    
    print("üß™ TEST DIRECTO DE FUSI√ìN")
    print("=" * 50)
    
    # Simular bloques exactos como los que produce PyMuPDF
    bloques_simulados = [
        {
            'text': 'La promesa principal, por ponerlo simple, es que el pueblo puede gobernar. Al menos en teor√≠a, los populistas aseveran que el pueblo como un todo no s√≥lo tiene una voluntad com√∫n y coherente, sino que tambi√©n puede gobernar, en el sentido de que los representantes correctos pueden instrumentar lo que el pueblo ha demandado en forma de un mandato imperativo. Muchas intuiciones iniciales sobre la democracia pueden acomodarse en un cuadro similar: la democracia es autogobierno y quien puede gobernar idealmente no es s√≥lo una minor√≠a sino el todo. Incluso en la Atenas democr√°tica esta historia no era toda la historia, pero Atenas se acerc√≥ a la democracia tanto como es imaginable, en el sentido de cultivar un sentido de la capacidad colectiva y de, en los hechos, involucrarse en una acci√≥n colectiva (pero, fundamentalmente, bajo el entendido de que los ciudadanos gobernar√≠an y ser√≠an gobernados sucesivamente: no hay democracia sin una rotaci√≥n adecuada hacia y desde la funci√≥n p√∫blica).2 Uno tendr√≠a que ser muy necio para no ver el atractivo',
            'page': 45,
            'bbox': [100, 100, 500, 700]
        },
        {
            'text': 'de esta idea de c√≥mo dominar colectivamente el propio destino, y se nos debe excusar por sentir nostalgia ante esta p√©rdida en la pr√°ctica.',
            'page': 46,
            'bbox': [100, 50, 500, 150]
        }
    ]
    
    print("üìã BLOQUES ORIGINALES:")
    for i, bloque in enumerate(bloques_simulados):
        print(f"  {i+1}. P√°gina {bloque['page']}: {bloque['text'][:50]}...")
    
    # Test 1: Verificar funci√≥n de detecci√≥n
    print(f"\nüîç TEST 1: Funci√≥n _should_merge_cross_page")
    try:
        from dataset.processing.loaders.pdf_loader import PDFLoader
        
        # Crear una instancia dummy para usar el m√©todo
        loader = PDFLoader("dummy.pdf")
        
        texto1 = bloques_simulados[0]['text']
        texto2 = bloques_simulados[1]['text']
        
        resultado = loader._should_merge_cross_page(texto1, texto2)
        print(f"  ¬øDeber√≠a fusionar?: {resultado}")
        
        if resultado:
            print("  ‚úÖ DETECT√ì que debe fusionar")
        else:
            print("  ‚ùå NO detect√≥ que debe fusionar")
            
    except Exception as e:
        print(f"  üí• ERROR en _should_merge_cross_page: {e}")
    
    # Test 2: Verificar fusi√≥n completa
    print(f"\nüîß TEST 2: Funci√≥n _merge_cross_page_sentences completa")
    try:
        resultado_fusion = loader._merge_cross_page_sentences(bloques_simulados)
        
        print(f"üìä RESULTADO DE FUSI√ìN:")
        print(f"  Bloques originales: {len(bloques_simulados)}")
        print(f"  Bloques despu√©s de fusi√≥n: {len(resultado_fusion)}")
        
        if len(resultado_fusion) == 1:
            print("  ‚úÖ FUSION√ì correctamente en 1 bloque")
            texto_fusionado = resultado_fusion[0]['text']
            if "atractivo de esta idea" in texto_fusionado:
                print("  ‚úÖ El texto 'atractivo de esta idea' est√° UNIDO")
                print(f"  üìù Fragmento: ...{texto_fusionado[texto_fusionado.find('atractivo')-20:texto_fusionado.find('idea')+20]}...")
            else:
                print("  ‚ùå El texto 'atractivo de esta idea' NO est√° unido")
        else:
            print("  ‚ùå NO fusion√≥ correctamente")
            for i, bloque in enumerate(resultado_fusion):
                print(f"    Bloque {i+1}: {bloque['text'][:100]}...")
                
    except Exception as e:
        print(f"  üí• ERROR en _merge_cross_page_sentences: {e}")
        import traceback
        traceback.print_exc()
    
    # Test 3: ¬øPor qu√© no funciona en el pipeline real?
    print(f"\nüö® TEST 3: Comparaci√≥n con pipeline real")
    print("   Esto nos ayudar√° a entender por qu√© el pipeline real no funciona")
    
    try:
        # Ejecutar el loader real
        pdf_path = r"C:\Users\adven\OneDrive\Escritorio\probando biblioperson\Recopilaci√≥n de Escritos Propios\escritos\Biblioteca virtual\¬øQu√© es el populismo_ - Jan-Werner M√ºller.pdf"
        
        if os.path.exists(pdf_path):
            loader_real = PDFLoader(pdf_path)
            raw_data = loader_real.load()
            
            # Buscar bloques que contienen "atractivo" y "de esta idea"
            bloques_atractivo = []
            for i, block in enumerate(raw_data['blocks']):
                text = block.get('text', '')
                if 'atractivo' in text or 'de esta idea' in text:
                    bloques_atractivo.append((i, text[:100] + "..."))
            
            print(f"   üìã Bloques del loader real que contienen 'atractivo' o 'de esta idea':")
            for i, texto in bloques_atractivo:
                print(f"     Bloque {i}: {texto}")
                
            if len(bloques_atractivo) == 1:
                print("   ‚úÖ El loader real S√ç fusiona correctamente")
            else:
                print("   ‚ùå El loader real NO est√° fusionando")
        
    except Exception as e:
        print(f"   üí• ERROR ejecutando loader real: {e}")

if __name__ == "__main__":
    test_fusion_directa() 