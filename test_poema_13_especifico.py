#!/usr/bin/env python3
"""
TEST POEMA 13 ESPEC√çFICO
========================

Analizar exactamente el contenido del Poema 13 para entender 
por qu√© los saltos de l√≠nea no se preservan correctamente.
"""

import sys
import os
import json
from pathlib import Path

# Agregar el directorio del proyecto al path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

try:
    from dataset.processing.profile_manager import ProfileManager
    
    def test_poema_13_especifico():
        """Analizar el Poema 13 espec√≠ficamente"""
        
        test_file = "C:/Users/adven/Downloads/Neruda Pablo_20 Poemas De Amor Y Una Cancion Desesperada.pdf"
        
        if not os.path.exists(test_file):
            print(f"‚ùå Archivo no encontrado: {test_file}")
            return False
        
        print("üîç TEST POEMA 13 ESPEC√çFICO")
        print("=" * 50)
        
        # Configurar ProfileManager
        profile_manager = ProfileManager()
        
        # Procesar archivo
        result = profile_manager.process_file(
            file_path=test_file,
            profile_name="verso",
            output_format="json"
        )
        
        # El resultado es directamente la lista de segmentos
        if not result:
            print("‚ùå No se obtuvieron segmentos")
            return False
        
        segments = result
        print(f"üìä Total de segmentos: {len(segments)}")
        
        # Buscar el Poema 13
        poema_13 = None
        for segment in segments:
            # Si es una lista, tomar el primer elemento
            if isinstance(segment, list):
                if not segment:
                    continue
                segment_data = segment[0]
            else:
                segment_data = segment
            
            # Acceder al atributo del ProcessedContentItem
            text = getattr(segment_data, 'texto_segmento', '') or getattr(segment_data, 'content', '')
            if 'Poema 13' in text and 'He ido marcando' in text:
                poema_13 = segment_data
                break
        
        if not poema_13:
            print("‚ùå No se encontr√≥ el Poema 13")
            return False
        
        print(f"\nüìÑ POEMA 13 ENCONTRADO:")
        print("-" * 40)
        
        texto = getattr(poema_13, 'texto_segmento', '') or getattr(poema_13, 'content', '')
        
        print(f"Longitud total: {len(texto)} caracteres")
        print(f"Saltos de l√≠nea: {texto.count(chr(10))} (\\n)")
        literal_newlines = texto.count('\\n')
        print(f"Saltos de l√≠nea visibles: {literal_newlines} (literal)")
        
        # Analizar l√≠nea por l√≠nea
        lines = texto.split('\n')
        print(f"Total de l√≠neas: {len(lines)}")
        
        print(f"\nPrimeras 15 l√≠neas del Poema 13:")
        for i, line in enumerate(lines[:15]):
            print(f"   {i+1:2d}: {repr(line)}")
        
        # AN√ÅLISIS ESPEC√çFICO: ¬øC√≥mo deber√≠an verse los versos?
        print(f"\nüéØ AN√ÅLISIS DEL PROBLEMA:")
        print("-" * 40)
        
        # Buscar los primeros versos que sabemos que deber√≠an estar separados
        versos_esperados = [
            "He ido marcando con cruces de fuego",
            "el atlas blanco de tu cuerpo.",
            "Mi boca era una ara√±a que cruzaba escondi√©ndose.",
            "En ti, detr√°s de ti, temerosa, sedienta.",
        ]
        
        texto_completo = ' '.join(texto.split())  # Normalizar espacios
        
        print("Buscando versos espec√≠ficos en el texto:")
        for i, verso in enumerate(versos_esperados):
            verso_normalizado = ' '.join(verso.split())
            if verso_normalizado in texto_completo:
                print(f"   ‚úÖ Verso {i+1} encontrado: {verso}")
                
                # Buscar en qu√© l√≠nea est√°
                for j, line in enumerate(lines):
                    if verso_normalizado in ' '.join(line.split()):
                        print(f"      ‚Üí En l√≠nea {j+1}: {repr(line)}")
                        break
            else:
                print(f"   ‚ùå Verso {i+1} NO encontrado: {verso}")
        
        # MOSTRAR COMO DEBER√çA VERSE
        print(f"\nüìù COMO DEBER√çA VERSE EL POEMA 13:")
        print("-" * 40)
        expected_format = """Poema 13

He ido marcando con cruces de fuego
el atlas blanco de tu cuerpo.
Mi boca era una ara√±a que cruzaba escondi√©ndose.
En ti, detr√°s de ti, temerosa, sedienta.
Historias que contarte la orilla del crep√∫sculo,
mu√±eca triste dulce, para que no estuvieras triste.
Un cisne, un √°rbol, algo lejano alegre.
El tiempo de las uvas, el tiempo maduro frutal."""
        
        print(expected_format)
        
        print(f"\nüîç COMO APARECE ACTUALMENTE:")
        print("-" * 40)
        print(texto[:500] + "..." if len(texto) > 500 else texto)
        
        # VERIFICAR SI EL PROBLEMA ES EN LA UNI√ìN
        print(f"\nüõ†Ô∏è DIAGN√ìSTICO T√âCNICO:")
        print("-" * 40)
        
        # Verificar si hay m√∫ltiples l√≠neas o si est√° todo en una l√≠nea
        content_lines = [line.strip() for line in lines if line.strip()]
        
        if len(content_lines) <= 3:
            print("‚ùå PROBLEMA: Muy pocas l√≠neas - los versos est√°n unidos")
            print(f"   Solo {len(content_lines)} l√≠neas de contenido")
        elif len(content_lines) >= 15:
            print("‚úÖ ESTRUCTURA CORRECTA: M√∫ltiples l√≠neas detectadas")
            print(f"   {len(content_lines)} l√≠neas de contenido")
        else:
            print("‚ö†Ô∏è ESTRUCTURA INTERMEDIA: Verificar manualmente")
            print(f"   {len(content_lines)} l√≠neas de contenido")
        
        return True
    
    if __name__ == "__main__":
        print("üß™ TEST POEMA 13 ESPEC√çFICO")
        print("=" * 50)
        
        test_poema_13_especifico()
        
except ImportError as e:
    print(f"‚ùå Error de importaci√≥n: {e}")
    print("‚ö†Ô∏è Aseg√∫rate de ejecutar desde el directorio ra√≠z del proyecto") 