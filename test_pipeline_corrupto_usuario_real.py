#!/usr/bin/env python3
"""
üîß TEST: PIPELINE COMPLETO CON CASO REAL DEL USUARIO
Simula el caso exacto mostrado por el usuario donde el elemento
"*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*" aparece en medio del texto.
"""

import sys
import os
sys.path.append('dataset')

def test_caso_real_usuario():
    """
    Testa el pipeline completo con el texto exacto que mostr√≥ el usuario.
    """
    print("üîß SIMULANDO CASO REAL DEL USUARIO")
    print("=" * 60)
    
    try:
        from processing.segmenters.verse_segmenter import VerseSegmenter
        
        # Crear segmentador
        segmenter = VerseSegmenter()
        
        # üìù TEXTO EXACTO DEL USUARIO (simplificado para el test)
        # Este es el tipo de texto que est√° apareciendo en el JSON del usuario
        
        user_corrupted_text = """PALABRAS LIMINARES
Despu√©s de Azul, despu√©s de los Raros, voces insinuantes, buena mala
intenci√≥n, entusiasmo sonoro envidia subterr√°nea, --todo bella
cosecha--solicitaron lo que en conciencia, no he cre√≠do fructuoso ni
oportuno: un manifiesto.
Ni fructuoso ni oportuno:
*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*
) Por la absoluta falta de elevaci√≥n mental de la mayor√≠a pensante de
nuestro continente, en el cual impera el universal personaje clasificado
por R√©my de Gour, como el Plouc contempor√°neo, cuyo √∫nico don es conocer
comparatas. Porque proclamando, como proclamo, una est√©tica acr√°tica, la
imposici√≥n de un modelo o de un c√≥digo implicar√≠a una contradicci√≥n."""
        
        print(f"üìù TEXTO CORRUPTO DEL USUARIO:")
        print(f"   Contiene: '*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*'")
        print(f"   Longitud: {len(user_corrupted_text)} caracteres")
        
        # Test 1: Limpieza directa del texto
        print(f"\nüßπ TEST 1: Limpieza directa")
        cleaned_text = segmenter._clean_structural_corruption(user_corrupted_text)
        
        print(f"   ANTES: Contiene '*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*': {('*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*' in user_corrupted_text)}")
        print(f"   DESPU√âS: Contiene '*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*': {('*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*' in cleaned_text)}")
        
        if "*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*" not in cleaned_text:
            print(f"   ‚úÖ SUCCESS: Elemento corrupto removido")
        else:
            print(f"   ‚ùå FAIL: Elemento corrupto todav√≠a presente")
            return False
        
        # Verificar que el contenido real se preserv√≥
        essential_content = ["PALABRAS LIMINARES", "Despu√©s de Azul", "manifiesto", "est√©tica acr√°tica"]
        content_preserved = all(content in cleaned_text for content in essential_content)
        
        if content_preserved:
            print(f"   ‚úÖ SUCCESS: Contenido esencial preservado")
        else:
            print(f"   ‚ùå WARNING: Alg√∫n contenido esencial perdido")
        
        # Test 2: Simulaci√≥n de pipeline completo
        print(f"\nüîß TEST 2: Pipeline completo simulado")
        
        # Simular bloques como los que llegan al VerseSegmenter
        document_blocks = [
            # Un bloque grande con texto corrupto mezclado (como el caso real)
            {
                'text': user_corrupted_text,
                'metadata': {
                    'type': 'text_block',
                    'page_number': 1,
                    'order': 0
                }
            },
            # Otro bloque para simular m√°s contenido
            {
                'text': 'TARDE DEL TR√ìPICO\nEs la tarde gris y triste.\nViste el mar de terciopelo\ny el cielo profundo viste\nde duelo.',
                'metadata': {
                    'type': 'text_block', 
                    'page_number': 2,
                    'order': 1
                }
            }
        ]
        
        print(f"   üìä Procesando {len(document_blocks)} bloques")
        
        # Segmentar con el VerseSegmenter
        segments = segmenter.segment(document_blocks)
        
        print(f"   üìä RESULTADOS: {len(segments)} segmentos generados")
        
        # Verificar cada segmento
        corrupted_segments = 0
        clean_segments = 0
        
        for i, segment in enumerate(segments):
            text = segment.get('text', '')
            title = segment.get('title', 'Sin t√≠tulo')
            
            print(f"\n   üìñ Segmento {i+1}: '{title}'")
            print(f"      Longitud: {len(text)} caracteres")
            print(f"      Inicio: '{text[:80]}{'...' if len(text) > 80 else ''}'")
            
            # Verificar presencia de elemento corrupto
            if "*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*" in text:
                corrupted_segments += 1
                print(f"      ‚ùå CONTIENE ELEMENTO CORRUPTO")
                
                # Mostrar d√≥nde aparece
                corruption_index = text.find("*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*")
                context_start = max(0, corruption_index - 50)
                context_end = min(len(text), corruption_index + 100)
                context = text[context_start:context_end]
                print(f"      üîç Contexto: '{context}'")
            else:
                clean_segments += 1
                print(f"      ‚úÖ LIBRE DE ELEMENTOS CORRUPTOS")
        
        # Resultado final
        print(f"\nüìä RESULTADO FINAL:")
        print(f"   - Segmentos limpios: {clean_segments}")
        print(f"   - Segmentos corruptos: {corrupted_segments}")
        
        if corrupted_segments == 0:
            print(f"\nüéâ SUCCESS: PROBLEMA DEL USUARIO SOLUCIONADO")
            print(f"   ‚úÖ Ning√∫n segmento contiene '*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*'")
            print(f"   ‚úÖ VerseSegmenter V2.3 limpia correctamente")
            print(f"   ‚úÖ Output JSON ser√° limpio")
            return True
        else:
            print(f"\n‚ùå FAIL: {corrupted_segments} segmentos a√∫n contienen elementos corruptos")
            print(f"   ‚ö†Ô∏è El usuario seguir√° viendo el problema")
            return False
            
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_caso_real_usuario()
    
    if success:
        print(f"\nüéâ CASO REAL DEL USUARIO SOLUCIONADO")
        print(f"\nüìã IMPLEMENTACI√ìN EXITOSA:")
        print(f"   ‚úÖ VerseSegmenter V2.3 activo")
        print(f"   ‚úÖ Limpieza directa en _create_poem_text")
        print(f"   ‚úÖ Elemento '*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*' removido")
        print(f"   ‚úÖ Contenido po√©tico preservado")
        print(f"\nüöÄ El usuario ya no ver√° elementos corruptos en su JSON")
        exit(0)
    else:
        print(f"\n‚ùå CASO REAL A√öN NO SOLUCIONADO")
        print(f"\nüìã ACCIONES REQUERIDAS:")
        print(f"   - Verificar que VerseSegmenter V2.3 se est√° usando")
        print(f"   - Confirmar que _clean_structural_corruption se aplica")
        print(f"   - Revisar patrones regex para coincidencias")
        exit(1) 