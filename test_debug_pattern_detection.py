#!/usr/bin/env python3
"""
üîß DEBUG: DETECCI√ìN DE PATRONES
Test simple para debuggear por qu√© no se detecta "*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*"
"""

import re

def test_pattern_detection():
    print("üîß DEBUG: DETECCI√ìN DE PATRONES")
    print("=" * 50)
    
    # Texto problem√°tico del usuario
    test_text = "*Antolo* *g* *√≠a* *Rub√©n Dar√≠o*"
    print(f"üìù Texto a detectar: '{test_text}'")
    
    # Patrones que estoy usando (CORREGIDOS)
    patterns = [
        r'\*Antolo\*.*\*[g√≠]\*.*\*[√≠i]a\*.*Rub[e√©]n.*Dar[√≠i]o',  # *Antolo* *g* *√≠a* *Rub√©n Dar√≠o*
        r'Antolo.*Rub[e√©]n.*Dar[√≠i]o',  # Variaciones simples de "Antolog√≠a Rub√©n Dar√≠o"
        r'\*.*Antolo.*\*.*Rub[e√©]n.*Dar[√≠i]o',  # Cualquier cosa con asteriscos, Antolo, Rub√©n, Dar√≠o
    ]
    
    print(f"\nüéØ PROBANDO PATRONES:")
    for i, pattern in enumerate(patterns, 1):
        print(f"\nPatr√≥n {i}: {pattern}")
        match = re.search(pattern, test_text, re.IGNORECASE)
        if match:
            print(f"  ‚úÖ MATCH: '{match.group()}'")
        else:
            print(f"  ‚ùå NO MATCH")
    
    # Intentemos patrones m√°s simples
    print(f"\nüîß PROBANDO PATRONES SIMPLES:")
    simple_patterns = [
        r'\*Antolo\*',           # Solo *Antolo*
        r'\*g\*',                # Solo *g*
        r'\*√≠a\*',               # Solo *√≠a*
        r'\*Rub√©n\*',            # Solo *Rub√©n*
        r'\*Dar√≠o\*',            # Solo *Dar√≠o*
        r'Antolo.*Dar√≠o',        # Antolo...Dar√≠o (sin asteriscos)
        r'\*.*Antolo.*\*',       # Cualquier cosa con asteriscos y Antolo
    ]
    
    for i, pattern in enumerate(simple_patterns, 1):
        print(f"\nPatr√≥n simple {i}: {pattern}")
        match = re.search(pattern, test_text, re.IGNORECASE)
        if match:
            print(f"  ‚úÖ MATCH: '{match.group()}'")
        else:
            print(f"  ‚ùå NO MATCH")
    
    # Analizar car√°cter por car√°cter
    print(f"\nüîç AN√ÅLISIS CAR√ÅCTER POR CAR√ÅCTER:")
    for i, char in enumerate(test_text):
        print(f"  [{i:2d}] '{char}' (ord: {ord(char)})")
    
    return True

if __name__ == "__main__":
    test_pattern_detection() 